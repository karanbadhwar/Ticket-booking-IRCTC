/*
 * This source file was generated by the Gradle 'init' task
 */
package ticket.booking.irctc;

import ticket.booking.irctc.entities.Ticket;
import ticket.booking.irctc.entities.Train;
import ticket.booking.irctc.entities.User;
import ticket.booking.irctc.services.UserBookingService;
import ticket.booking.irctc.util.UserServiceUtil;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class App {

    public static void main(String[] args) {
        System.out.println("Running Train Booking System");
        Scanner scan = new Scanner(System.in);

        int option = 0;
        UserBookingService userBookingService;
        try {
            userBookingService = new UserBookingService();
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return;
        }

        while (option != 7) {
            System.out.println("Choose Option");
            System.out.println("1. Sign Up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Bookings");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel My Booking");
            System.out.println("7. Exit the App");
            option = scan.nextInt();
            Train trainSelectedForBooking = new Train();
            switch (option) {
                case 1:
                    System.out.println("Enter the username to signup");
                    String nameToSignUp = scan.next();
                    System.out.println("Enter the password to signup");
                    String passwordToSignUp = scan.next();
                    User user = new User(nameToSignUp, passwordToSignUp, UserServiceUtil.hashPassword(passwordToSignUp), new ArrayList<Ticket>(), UUID.randomUUID().toString());
                    userBookingService.signUp(user);
                    break;

                case 2:
                    System.out.println("Enter the Username to login");
                    String nameToLogin = scan.next();
                    System.out.println("Enter the password to Login");
                    String passwordToLogin = scan.next();

                    User userToLogin = new User(nameToLogin, passwordToLogin, UserServiceUtil.hashPassword(passwordToLogin), new ArrayList<Ticket>(), UUID.randomUUID().toString());
                    try {
                        userBookingService = new UserBookingService(userToLogin);
                    } catch (IOException e) {
                        System.out.println(e.getMessage());
                        return;
                    }
                    break;
                case 3:
                    System.out.println("Fetching you bookings!!");
                    userBookingService.fetchBooking();
                    break;

                case 4:
                    System.out.println("Type your Source Station");
                    String source = scan.next();
                    System.out.println("Type your Destination Station");
                    String destination = scan.next();
                    List<Train> trains = userBookingService.getTrains(source, destination);
                    int index = 1;
                    for (Train t : trains) {
                        System.out.println(index + " Train id : " + t.getTrainId());
                        for (Map.Entry<String, String> entry : t.getStationTimes().entrySet()) {
                            System.out.println("Station " + entry.getKey() + " time: " + entry.getValue());
                        }
                    }
                    System.out.println("Select a train by typing 1,2,3...");
                    trainSelectedForBooking = trains.get(scan.nextInt());
                    break;

                case 5:
                    System.out.println("Select a seat out of these seats");
                    List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);
                    for (List<Integer> row : seats) {
                        for (Integer val : row) {
                            System.out.print(val + "");
                        }
                    }
                    System.out.println();

                    System.out.println("Select the seat by typing the row and column");
                    System.out.println("Enter the row");
                    int row = scan.nextInt();
                    System.out.println("Enter the column");
                    int col = scan.nextInt();
                    System.out.println("Booking your seat...");
                    Boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking, row, col);
                    if (booked.equals(Boolean.TRUE)) {
                        System.out.println("Booked! Enjoy your journey");
                    } else {
                        System.out.println("Can't book this seat");
                    }
                    break;
            }
        }

    }
}

//Trying to get the Directory Hierarchy
// Get the absolute path of the currently executing class file
//String path = "app/main/java/ticket/booking/irctc/localDB/users.json";
//
//// Convert the path to a File object
//File file = new File(path);
//
//// Check if the file object is a directory or a file
//        if (file.isFile()) {
//file = file.getParentFile(); // Get the directory containing the file
//        }
//
//                // Print the directory hierarchy
//                System.out.println("Directory hierarchy:");
//        while (file != null) {
//        System.out.println(file.getAbsolutePath());
//file = file.getParentFile(); // Move to the parent directory
//        }


//        // Get the current working directory
//        String currentDir = System.getProperty("user.dir");
//
//        // Print the current working directory
//        System.out.println("Current working directory: " + currentDir);

//--------------------------------------------------------------------------------
//Trying-out the lambdas and how predicate functions work